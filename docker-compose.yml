# docker-compose.yml
# Used for "clone & run" deployment scenario
# Started by ./start.sh with auto-generated .env

services:
  postgres:
    container_name: airweave-db
    image: postgres:16
    # Uses variables from .env with fallbacks
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-airweave}
      POSTGRES_USER: ${POSTGRES_USER:-airweave}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airweave1234!}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airweave}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: airweave-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: airweave-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Import all variables from .env file
    env_file:
      - .env
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/app
    # These variables override any from .env file
    # Required for container networking (services refer to container names, not localhost)
    environment:
      # Override any localhost references for container networking
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - TEXT2VEC_INFERENCE_URL=http://text2vec-transformers:8080
      # These ensure services run properly inside containers
      - LOCAL_DEVELOPMENT=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 5s
      timeout: 10s
      retries: 3
    restart: on-failure

  frontend:
    container_name: airweave-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_LOCAL_DEVELOPMENT_PORT:-8080}:8080"
    environment:
      - API_URL=http://localhost:8001
      - ENABLE_AUTH=false
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  text2vec-transformers:
    container_name: airweave-embeddings
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2
    ports:
      - "9878:8080"
    environment:
      ENABLE_CUDA: 0
      WORKERS_PER_NODE: 1
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  qdrant:
    container_name: airweave-qdrant
    image: qdrant/qdrant:latest
    command: bash -c "apt-get update && apt-get install -y curl && ./entrypoint.sh" # we need to install curl to check health
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
